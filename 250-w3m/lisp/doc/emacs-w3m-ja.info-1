Info file: emacs-w3m-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs-w3m-ja.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

INFO-DIR-SECTION GNU Emacs Lisp
START-INFO-DIR-ENTRY
* Emacs-w3m-ja: (emacs-w3m-ja).  An Emacs interface to w3m (Japanese)
END-INFO-DIR-ENTRY


This file documents emacs-w3m, an Emacs interface to w3m.

このファイルは Emacs で動く w3m のインタフェースである emacs-w3m に関す
る説明書です。

Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005
TSUCHIYA Masatoshi

This edition is for emacs-w3m version 1.4.4.

この版は emacs-w3m バージョン 1.4.4 に対応します。

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU General Public License, Version 2 or any
later version published by the Free Software Foundation.

この文書を、フリーソフトウェア財団発行の GNU 一般公用使用許諾書第 2 版
またはそれ以降の版が定める条件の下で複製、配布、あるいは変更することを
許可します。

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

この文書は有用とは思いますが, 頒布にあたっては, 市場性及び特定目的適合
性についての暗黙の保証を含めて, いかなる保証も行ないません. 詳細につい
ては GNU 一般公有使用許諾書をお読みください.

You should have received a copy of the GNU General Public License
along with this document; if not, you can either send email to this
document's maintainer or write to: The Free Software Foundation, Inc.;
59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.

あなたは, この文書と一緒に GNU 一般公有使用許諾の写しを受け取っているは
ずです. そうでない場合は, 文書の管理者にメールを送るか、または、フリー
ソフトウェア財団 (675 Mass Ave, Cambridge, MA 02139, USA) に手紙を書い
てください。





File: emacs-w3m-ja.info, Node: Top, Next: Introduction, Prev: (dir), Up: (dir)

Emacs-w3m ユーザマニュアル
**************************

                                                  Emacs-w3m 開発チーム

この文書は emacs-w3m バージョン 1.4.4 に対応します。


* Menu:

* Introduction::                はじめに
* Getting Started::             Emacs-w3m を使い始めるのはとっても簡単
* Basic Usage::                 基本的な使い方
* Pretty Good Features::        たくさんのすぐれもの
* Customizable Variables::      デフォルトのままでも結構良いと思うけれど
* Hooking into MUAs::           メール/ニュースリーダーで使う
* Frequently Asked Questions::  必ず答があるとは限らない
* Known Problems::              あなたならきっと解決できる
* Shimbun Library::             ウェブ上の新聞を読むための道具
* Tips::                        Emacs-w3m を使う洒落た小物たち
* Mailing List::                メーリングリスト、バグリポート
* Emacs-w3m Functions::         Emacs-w3m の関数の詳しい説明
* External Packages::           お仲間のパッケージたち
* Authors::                     このマニュアルを書いた人たち
* Index::                       索引

 -- 項目の詳細なリスト ---

Getting Started

* Required Emacs Version::      どんなバージョンの Emacs で使えるの?
* You Need w3m::                w3m を使います: emacs-w3m が速いわけ
* Other Requirements::          Emacs-w3m を動作させるのに必要なもの
* Installing Emacs-w3m::        Emacs-w3m をインストールする
* Non-UNIX-like systems::       非 UNIX 系環境でのインストール
* Minimal Settings::            設定しなければならない最低限のもの

Basic Usage

* Browsing Web Pages::          ネットサーフィンしよう!
* Inline Images::               画像表示を ON/OFF する
* Tracing History::             時空を遡る
* Managing Bookmarks::          ぼくの/わたしのお気に入り
* Using Tabs::                  みんなタブが好きだよね
* Working with buffers::        バッファを作る/消す/移動する
* Downloading::                 ファイルをダウンロードする
* Submitting Forms::            HTML フォームに記入する
* HTML File Information::       ウェブページ作りとハックのお手伝い

Pretty Good Features

* Using Search Engines::        使いやすいウェブ検索
* Grouping URLs::               一つの URL で複数のウェブページを見る
* Weather Information::         明日の天気は晴れでしょう
* Using Antenna::               アンテナを張り巡らそう
* Showing Directory Tree::      ディレクトリの木構造を表示する
* Viewing Perl Documents::      Perl のドキュメントを見る
* Using Namazu::                Namazu でファイルを検索する
* Octet::                       application/octet-stream データを見る

Customizable Variables

* General Variables::           一般的な変数
* Image Variables::             画像に関連した変数
* Form Variables::              フォームに関連した変数
* Cookie Variables::            クッキーに関連した変数
* Bookmark Variables::          ブックマークに関連した変数
* Search Variables::            ウェブ検索に関連した変数
* Weather Variables::           天気予報に関連した変数
* Dtree Variables::             dtree に関連した変数
* Antenna Variables::           アンテナに関連した変数
* Perldoc Variables::           Perldoc に関連した変数
* Namazu Variables::            Namazu に関連した変数
* Octet Variables::             Octet に関連した変数
* Hooks::                       フック
* Other Variables::             その他の変数

Hooking into MUAs

* Gnus::                        Gnus で HTML メールを読む
* Mew::                         Mew で HTML メールを読む
* SEMI MUAs::                   SEMI MUA で HTML メールを読む
* VM::                          VM (vieW maiL) は Wanderlust にあらず

Frequently Asked Questions

* General FAQ::                 一般的な質問
* Trouble FAQ::                 トラブル
* Shimbun FAQ::                 Shimbun に関する質問

Known Problems

Shimbun Library

* Nnshimbun::                   Gnus をウェブブラウザにする!
* Mew Shimbun::                 Mew で新聞を読む
* Shimbun with Wanderlust::     Wanderlust で新聞を読む
* Shimbun Sites::               新聞が読めるサイト
* Shimbun Basics::              新聞モジュールの作り方

Tips

Mailing List

Emacs-w3m Functions




File: emacs-w3m-ja.info, Node: Introduction, Next: Getting Started, Prev: Top, Up: Top

はじめに
********

Emacs/W3 (http://www.cs.indiana.edu/elisp/w3/docs.html) は、かつては
Emacs 上で動作する最もポピュラーな web ブラウザーでした。しかし動作が非
常に遅かったので、私たちはそれに代わる速いものを欲しました。一方、w3m
(http://w3m.sourceforge.net/) というページャーがありました。それはペー
ジャーでしたが、テキストモード WWW ブラウザーとして使うことができたので、
私たちは w3m への Emacs インターフェースの開発を始めました。

すばらしい w3m プログラムを開発してくれた伊藤彰則さんと w3m チームのみ
なさんに、格段の感謝を捧げます。さらにコメント、提案およびバグの修正を
してくれたすべての人々に感謝します。たとえ問題があっても、責任はすべて
私たち (emacs-w3m 開発チーム) にあります。もっとも、保証はまったくあり
ませんが。Emacs-w3m は 2000年6月に土屋雅稔によって創始されました。

Emacs-w3m の公式ページ (http://emacs-w3m.namazu.org/) も併せてご覧下さ
い。



File: emacs-w3m-ja.info, Node: Getting Started, Next: Basic Usage, Prev: Introduction, Up: Top

Emacs-w3m を使い始めるのはとっても簡単
**************************************

ひょっとすると、あなたのシステムには emacs-w3m がすでにインストールされ
ているかもしれません。その場合、あなたはこの項を読み飛ばして、直ちに使
い始めることができます。そんな幸運に恵まれなかったならば、emacs-w3m の
インストールの仕方を会得するために、読み続けて下さい。

* Menu:

* Required Emacs Version::      どんなバージョンの Emacs で使えるの?
* You Need w3m::                w3m を使います: emacs-w3m が速いわけ
* Other Requirements::          Emacs-w3m を動作させるのに必要なもの
* Installing Emacs-w3m::        Emacs-w3m をインストールする
* Non-UNIX-like systems::       非 UNIX 系環境でのインストール
* Minimal Settings::            設定しなければならない最低限のもの



File: emacs-w3m-ja.info, Node: Required Emacs Version, Next: You Need w3m, Prev: Getting Started, Up: Getting Started

どんなバージョンの Emacs で使えるの?
====================================

以下に挙げたいろいろなバージョンの Emacsen で emacs-w3m を動作させるこ
とができます。

`Emacs 21.x'
     追加のパッケージは不要です。

`Emacs 22.x'
     追加のパッケージは不要です。Emacs 22 のリリース前のバージョン
     (21.3.50 や 22.0) を使う場合は、それが 2004年3月以降のバージョンで
     あることを確かめて下さい。

`XEmacs 21.x'
     APEL パッケージと `gifsicle' プログラムが必要です (*Note Other
     Requirements::)。最も安定している最新の XEmacs 21.4 を使うことを推
     奨します。

`Emacs 20.x'
     追加のパッケージは不要です。さらに BITMAP-MULE パッケージを使うこ
     とによって、白黒のビットマップ画像をインライン表示することができま
     す (*Note Other Requirements::)。

`Emacs 19.34 (含 Mule 2.3)'
     APEL パッケージ、`新しい custom' パッケージおよび `regexp-opt.el'
     モジュールが必要です。Emacs 19.34 を元にした Mule 2.3 では、
     BITMAP-MULE パッケージを使うことによって、白黒のビットマップ画像を
     インライン表示することができます (*Note Other Requirements::)。



File: emacs-w3m-ja.info, Node: You Need w3m, Next: Other Requirements, Prev: Required Emacs Version, Up: Getting Started

w3m を使います: emacs-w3m が速いわけ
====================================

Emacs-w3m は外部コマンド w3m を、ウェブコンテンツを取得するためのバック
エンドとして、または HTML の描画エンジンとして使用します。非同期動作に
よって高速な Emacs ウェブブラウザを実現することができたのは w3m のおか
げです。

あなたは最新の w3m をインストールしなければなりません。それは以下の場所
で取得できます:

`http://prdownloads.sourceforge.net/w3m/'



File: emacs-w3m-ja.info, Node: Other Requirements, Next: Installing Emacs-w3m, Prev: You Need w3m, Up: Getting Started

Emacs-w3m を動作させるのに必要なもの
====================================

Emacs のバージョンによっては、サードパーティのパッケージが必要になるこ
とがあります。この項では、それらを見つけてインストールするための資料を
提供します。

`APEL'
     XEmacs、Emacs 19.34 または Mule 2.3 に不可欠です。Emacs-w3m を構築
     する前に APEL をインストールしなければなりません。APEL は以下の場
     所にあります:

     `ftp://ftp.m17n.org/pub/mule/apel/apel-10.6.tar.gz'

     APEL XEmacs パッケージ (SUMO に含まれています) は使えないことに注
     意して下さい。もしすでに APEL XEmacs パッケージがインストールされ
     ているならば、それを上記のリンクで示した APEL で置き換えるために、
     以下の命令を使って下さい (新規に APEL をインストールする場合も同じ
     命令を使うことができます):

          % rm -fr /usr/local/lib/xemacs/xemacs-packages/lisp/apel
          % cd apel-10.6
          % make install-package XEMACS=xemacs-21.4.x\
            PACKAGEDIR=/usr/local/lib/xemacs/xemacs-packages

`gifsicle'
     XEmacs に不可欠です。すべての XEmacs 21.x には、オプティマイズされ
     たアニメーション gif が正常に表示されなかったり、ある種のインター
     レース gif を表示しようとするとクラッシュしてしまう既知のバグがあ
     ります。Emacs-w3m は gif データを XEmacs 21.x で扱える形式に変換す
     るために、`gifsicle' プログラムを使います。これは次の場所から入手
     することができます:

     `http://www.lcdf.org/gifsicle/'

`ImageMagick'
     ImageMagick パッケージに含まれている `convert' プログラムがあれば、
     emacs-w3m は画像サイズの変更や `favicon' 画像を Emacs が扱えるフォー
     マットに変換するためにそれを使います。Emacs-w3m は ImageMagick が
     無くても動作するでしょうが、インストールすることによってあなたのネッ
     トサーフィンが豊かなものになるでしょう。ImageMagick パッケージは、
     以下の場所から手に入れることができます:

     `ftp://ftp.imagemagick.org/pub/ImageMagick/'

     `favicon' 画像を操作するために、バージョン 5.4.0-5 以降のものを使
     うことを推奨します。以前のバージョンも動くかもしれませんが、それら
     は完全にチェックされていません。

`BITMAP-MULE'
     Emacs 20.x か Emacs 19.34 を元にした Mule 2.3 で白黒のビットマップ
     画像を表示するために使います。画像に興味が無ければ、必ずしも必要で
     はありません。以下の場所で取得できます:

     `ftp://ftp.jpl.org/pub/elisp/bitmap/'

`new custom'
     Emacs 19.34 (含 Mule 2.3) に不可欠です。Emacs 19.34 に含まれている
     `custom' ライブラリは *古い* もので、これの API は最近の Emacs に
     含まれている `新しい custom' とは違っています。Emacs 19.34 用の
     `新しい custom' は、以下の場所から手に入れることができます:

     `ftp://ftp.dina.kvl.dk/pub/Staff/Per.Abrahamsen/custom/custom-1.9962.tar.gz'

     Mule 2.3 のユーザは、以下のパッチを当てて少し変更しなければならな
     いことに注意して下さい:

          ----8<------8<------8<------8<------8<------8<------8<------8<----
          --- custom-1.9962/cus-face.el~	Wed Mar  4 19:52:39 1998
          +++ custom-1.9962/cus-face.el	Mon Mar  9 08:05:33 1998
          @@ -96,7 +96,7 @@
                 "Define a new FACE on all frames, ignoring X resources."
                 (interactive "SMake face: ")
                 (or (internal-find-face name)
          -	  (let ((face (make-vector 8 nil)))
          +	  (let ((face (make-vector face-vector-length nil)))
	    (aset face 0 'face)
	    (aset face 1 name)
	    (let* ((frames (frame-list))
          ----8<------8<------8<------8<------8<------8<------8<------8<----

`regexp-opt.el'
     Emacs 19.34 (含 Mule 2.3) に不可欠です。`regexp-opt.el' ファイルは
     emacs-w3m の配布の `attic/' ディレクトリに含まれています。以下のよ
     うに、単にどこか (例えば `site-lisp/' ディレクトリ) にコピーして、
     byte-compile すれば良いです:

          # cp -p attic/regexp-opt.el /usr/local/share/emacs/19.34/site-lisp
          # cd /usr/local/share/emacs/19.34/site-lisp
          # emacs -batch -q -no-site-file -f batch-byte-compile regexp-opt.el

`FLIM'
     `Shimbun' ライブラリを使うためには FLIM パッケージが必要です。
     `Shimbun' ライブラリはウェブ上の新聞を読むための道具類のコレクショ
     ンで、Gnus、Mew、Nana-gnus、T-gnus、Wanderlust などとともに使うこ
     とができます。*Note Shimbun Library::.

     たとえ Emacs 20.x、Emacs 21.x または Emacs 22.x を使っている場合で
     も、FLIM パッケージには APEL パッケージが必要であることに注意して
     下さい。したがって `shimbun' ライブラリを使うには、APEL と FLIM の
     両方をインストールしなければなりません。FLIM パッケージは以下の場
     所にあります:

     `ftp://ftp.m17n.org/pub/mule/flim/flim-1.14/'

`xml.el'
     更新情報が RSS 形式で配布されているサイトを対象として `shimbun' ラ
     イブラリを利用する場合に必要です。Emacs 21 以上では同梱されていま
     すから、インストールの必要はありません。それ以外の Emacsen を利用
     している場合は、以下のように、単にどこか (例えば Emacs の
     `site-lisp/' ディレクトリ) にコピーして byte-compile すれば良いで
     す:

          # cp -p attic/xml.el /usr/local/share/emacs/20.7/site-lisp
          # cd /usr/local/share/emacs/20.7/site-lisp
          # emacs -batch -q -no-site-file -f batch-byte-compile xml.el

     ただし、Emacs 19.34 (含 Mule 2.3) では、以下のようにオプションを追
     加して byte-compile してください。

          # emacs -batch -eval '(put (quote char-after) (quote byte-compile) nil)' -f batch-byte-compile xml.el

`Mule-UCS'
     Mule-UCS Emacs Lisp パッケージを使うことによって、あなたの Emacs
     が Unicode システムを扱うことができるようになります。Emacs-w3m が
     UTF-8 などで書かれたページを表示できるようにするために、これをイン
     ストールすることを勧めます。以下の場所から取得して下さい:

     `ftp://ftp.m17n.org/pub/mule/Mule-UCS/Mule-UCS-0.84.tar.gz'

     Emacs-21.2 で利用する場合は、Mule-UCS に このパッチ
     (http://tsukuba.m17n.org/mule-archive/2002-3/msg00000.html) を適用
     したほうがいいでしょう。

     XEmacs ユーザ向けには、ここにコンパイル済みのパッケージがあります:

     `ftp://ftp.xemacs.org/packages/mule-ucs-1.04-pkg.tar.gz'



File: emacs-w3m-ja.info, Node: Installing Emacs-w3m, Next: Non-UNIX-like systems, Prev: Other Requirements, Up: Getting Started

Emacs-w3m をインストールする
============================

Emacs-w3m の取得に関しては公式ページ `http://emacs-w3m.namazu.org/' を
参照して下さい。すべて準備できましたか?  では始めましょう。

非 UNIX 系のシステム (`configure' を実行できないか `make' コマンドが無
い、何らかのシステム) に emacs-w3m をインストールするには、この項を飛ば
して次の項 *Note Non-UNIX-like systems:: に行って下さい。

  1. 最初に、配布された emacs-w3m の tarball を以下のように適当な場所で
     展開して、先頭のディレクトリに入って下さい:

          % tar zxf emacs-w3m-1.4.4.tar.gz
          % cd emacs-w3m-1.4.4

     Emacs-w3m を CVS で取得したのならば、`configure' スクリプトを生成
     するために (引数無しで) `autoconf' を実行しなければなりません。

  2. `configure' スクリプトを実行します。

          % ./configure

     *Gnus ユーザへの重要なお知らせ*:

     複数のバージョンの Gnus がインストールされている場合 (リリース版と
     開発版の Gnus があるかもしれません) は、`load-path' にあなたが使う
     バージョンがインストールされているディレクトリ (`gnus.elc' ファイ
     ルを調べましょう) を含むようにして下さい。以下のように
     `--with-addpath' オプションを使うことによって、これを確実に行なう
     ことができます:

          % ./configure --with-addpath=/usr/local/share/emacs/site-lisp/gnus

     APEL、FLIM または他の何かを、デフォルトの `load-path' 以外の標準で
     はないディレクトリにインストールしてある場合は、以下のように
     `--with-addpath' オプションを使ってそれらを指定しなければなりませ
     ん (さらに、それに `:' で分けられた Gnus のディレクトリを含めても
     構いません):

          % ./configure --with-addpath=/opt/share/apel:/opt/share/flim

  3. 単に `make' と `make install' を実行します。XEmacs を使っている場
     合は、さらに次の段落も見て下さい。

          % make
          % make install

     すべての Lisp ファイルと info ファイルが適切なディレクトリにインス
     トールされるでしょう。

     さて、あなたはどんなファイルがどこに行くか分かりますか?  それを前
     もって知るためには、これを使って下さい:

          % make what-where

     Emacs 21、22 または XEmacs を使っているならば、アイコン画像のファ
     イルをインストールした方が良いでしょう。それを行なうには:

          % make install-icons

     または

          % make install-icons30

     後者はちょっと大きなアイコン画像を使うためのものです。

  4. 以下のように `make install' の代わりに `make install-package' を使
     うことによって、emacs-w3m を XEmacs パッケージとしてインストールす
     ることもできます:

          % make
          % make install-package

     この場合 `make install-icons' または `make install-icons30' を実行
     する必要はありません。

     パッケージ・ディレクトリを指定するには二つの方法があります:

        * `configure' オプションの `--with-packagedir=' を使います。例
          です:

               % ./configure --with-packagedir=/opt/xemacs/xemacs-packages
               % make what-where
               % make
               % make install-package

        * 変数 `PACKAGEDIR' を使います。例です:

               % ./configure
               % make what-where PACKAGEDIR=/opt/xemacs/xemacs-packages
               % make
               % make install-package PACKAGEDIR=/opt/xemacs/xemacs-packages



File: emacs-w3m-ja.info, Node: Non-UNIX-like systems, Next: Minimal Settings, Prev: Installing Emacs-w3m, Up: Getting Started

非 UNIX 系環境でのインストール
==============================

あなたのシステムで `configure' スクリプトを実行することができないか、
`make' コマンドが利用できない場合は、以下の文句を唱えて下さい。

     % emacs -batch -q -no-site-file -l w3mhack.el NONE -f w3mhack-nonunix-install

APEL、FLIM (または他の何か) が普通の場所にインストールされていないと、
インストーラはそれらを無視してしまうでしょう。そんな場合は、以下に示す
ように、それらの場所をインストーラに告げる必要があります:

     % emacs -batch -q -no-site-file -l w3mhack.el //c/share/apel://c/share/flim -f w3mhack-nonunix-install



File: emacs-w3m-ja.info, Node: Minimal Settings, Prev: Non-UNIX-like systems, Up: Getting Started

設定しなければならない最低限のもの
==================================

この項では基本的な emacs-w3m の設定のいくつかを説明します。きめ細かな設
定をしたいならば、たくさんのカスタマイズ可能な変数を *Note
Customizable Variables:: で見つけることができるでしょう。

`Autoloads'
     Emacs-w3m を XEmacs パッケージとしてインストール (*Note
     Installing Emacs-w3m::) してあれば `w3m/auto-autoloads.el' ファイ
     ルが自動ロード (autoload) の面倒を見てくれるので、これは必要ありま
     せん。

     それ以外のすべての場合、以下の行を `~/.emacs' ファイルに入れて下さ
     い:

          (require 'w3m-load)

`Startup File'
     Emacs-w3m のいろんな変数をいじる必要があるときは、`~/.emacs-w3m'
     ファイル (これは `w3m-init-file' という変数のデフォルト値です) の
     利用を推奨します。このファイルは `~/.emacs' と似ていますが、こちら
     は emacs-w3m が起動するときに読み込まれます。`w3m-command' など幾
     つかのオプションは、このファイルでは変更できないことに注意して下さ
     い。

`Proxy Gateway'
     あなたが防火壁 (firewall) の中から proxy ゲートウェイを通してイン
     ターネットに接続している場合は、それを使うように w3m に指示する必
     要があります。

     これにはいくつかの方法があります。一つは環境変数 `http_proxy' を
     shell 上で、こんなふうにグローバルに設定することです:

          setenv http_proxy http://proxy.hogege.com:8000/

     他に、変数 `w3m-command-arguments' をカスタマイズして、`-o' および
     `http_proxy=http://PROXY_SERVER_NAME:PORT/' を追加する方法がありま
     す。これは `~/.emacs-w3m' ファイルで以下のように行なうこともできま
     す。

          (setq w3m-command-arguments
                (nconc w3m-command-arguments
                       '("-o" "http_proxy=http://proxy.hogege.com:8000/")))

     Proxy ゲートウェイを通すべきではないホスト (イントラネットのサイト
     など) を指定するには、環境変数 `no_proxy' (`no-proxy' ではないこと
     にご注意) にコンマで区分けされたホスト名のリストを設定して下さい。
     あるいは以下のように、変数 `w3m-no-proxy-domains' にドメイン名 (ホ
     スト名ではない) のリストを設定することもできます:

          (setq w3m-no-proxy-domains '("local.com" "neighbor.com"))

     `no_proxy' ホストの設定にどうやって正規表現を使うかの説明は、変数
     `w3m-command-arguments-alist' のドキュメントを見て下さい。



File: emacs-w3m-ja.info, Node: Basic Usage, Next: Pretty Good Features, Prev: Getting Started, Up: Top

基本的な使い方
**************

* Menu:

* Browsing Web Pages::          ネットサーフィンしよう!
* Inline Images::               画像表示を ON/OFF する
* Tracing History::             時空を遡る
* Managing Bookmarks::          ぼくの/わたしのお気に入り
* Using Tabs::                  みんなタブが好きだよね
* Working with buffers::        バッファを作る/消す/移動する
* Downloading::                 ファイルをダウンロードする
* Submitting Forms::            HTML フォームに記入する
* HTML File Information::       ウェブページ作りとハックのお手伝い



File: emacs-w3m-ja.info, Node: Browsing Web Pages, Next: Inline Images, Prev: Basic Usage, Up: Basic Usage

ネットサーフィンしよう!
=======================

Emacs-w3m でのウェブブラウジングは、御期待通り、キー操作で全て行なうこ
とができます。Emacs-w3m には、既存のウェブブラウザ／ドキュメントブラウ
ザに基づいた二種類のキー割当て体系 (キーマップ) が用意されています。一
つはテキストベースのウェブブラウザ lynx に基づくものです。このキーマッ
プは emacs-w3m のコード中では、`w3m-lynx-like-map' という変数で定義され
ています。もう一つは、GNU プロジェクトの標準ドキュメントブラウザ info
に基づくものです。このキーマップは `w3m-info-like-map' という変数で定義
されています。ユーザは自分の好みや lynx、info の利用経験に基づいて、ど
ちらかのキーマップを選ぶことができます。キーマップを選択する方法につい
ては *Note Customizable Variables:: を見て下さい。特に選択をしなかった
場合、`w3m-lynx-like-map' がデフォルトのキーマップとして使われます。以
降では、`w3m-lynx-like-map' に基づいて emacs-w3m の使い方を記述します。

ターミナル以外で Emacs が動作している場合、例えば X Window System のク
ライアントとして Emacs が動作している場合、他の GUI ベースのウェブブラ
ウザと同様にマウスを使ってもブラウジングの基本操作を行なうことができま
す。キー操作の方が迅速なブラウジングが可能ですが、マウス操作の方が覚え
ることは少ないです。

* Menu:

* Launching and Jumping::       とにかく動かしてみよう
* Moving in a page::            ページ内を飛びまわる
* Moving over pages::           ページ間を渡り歩く
* Browsing With Mouse Operations:: マウスを使ってサーフィン
* Going back to daily hacking and/or daily writing:: 普段の生活に戻るには



File: emacs-w3m-ja.info, Node: Launching and Jumping, Next: Moving in a page, Prev: Browsing Web Pages, Up: Browsing Web Pages

とにかく動かしてみよう
----------------------

以下に挙げる三つの違うコマンドを使って emacs-w3m を起動することができま
す。それらのコマンドの一つを試して下さい。ウェブページが "*w3m*" という
名前の Emacs のバッファ (emacs-w3m のバッファのこと) に表示されます。お
そらく気付くでしょうけれども、emacs-w3m のバッファのメジャーモードは
`w3m-mode' です。他にマイナーモード (*Note Managing Bookmarks::) もあり
ます。

ここでは、それらのコマンドの最も基本的な使い方だけを説明します。それら
についてもっと詳しく知りたい場合は、*Note Emacs-w3m Functions:: を参照
して下さい。また、emacs-w3m の動作をカスタマイズするために使うことがで
きる変数群を、*Note Customizable Variables:: で参照して下さい。

`w3m'
     Emacs-w3m を起動して、`w3m-home-page' という変数で指定されたホーム
     ページを表示します。`w3m-home-page' のデフォルトの値は "about:" で
     す。Emacs-w3m を起動したときに毎回 URL を入力できるようにしたい場
     合は、変数 `w3m-quick-start' の値を `nil' にして下さい (*Note
     Customizable Variables::)。

     これは Emacs のバッチコマンドとして使うこともできます。以下は例で
     す:

          % emacs -f w3m

     URL を指定して、このように使うこともできます:

          % emacs -f w3m http://emacs-w3m.namazu.org/

`w3m-find-file'
     ローカルファイル名をミニバッファで入力して、それを emacs-w3m で表
     示します。

`w3m-browse-url'
     URL をミニバッファで入力して、それを emacs-w3m で表示します。この
     コマンドは、どちらかと言えば他のアプリケーションプログラムから
     emacs-w3m を起動するために用意されています。

あなたがすでに Emacs のユーザならば、emacs-w3m のバッファの中で移動する
のに苦労は無いでしょう。多くの標準のキーがそのまま使えるのですから。例
えば `C-n'、`C-v' それに `C-s' は emacs-w3m バッファで有効なキーです
(これらは一行下降、一ページ送り、または後方単語検索として共通に使われま
す)。

リンクをたどるには RET キーを使って下さい。それにはポイントをリンクの場
所に移動しなければなりません。リンクは普通のテキストとは違って表示され
ているので、簡単に見分けることができます。それらは下線付き、または違う
色になっているはずです。それらの見栄えは `w3m-anchor-face' というフェー
スによって決まります (*Note Customizable Variables::)。

`RET'
     現在位置のリンクが指し示すページを表示します
     (`w3m-view-this-url')。

     このコマンドの振る舞いは、厳密には現在位置のリンクの性質によって、
     または接頭引数を与えるかどうかに依存します。詳細は *Note
     Emacs-w3m Functions:: を参照して下さい。

前述のように、変数 `w3m-quick-start' の値を `nil' に設定することによっ
て、`M-x w3m' コマンドを使ったときに URL を指定することが可能です。
Emacs-w3m のバッファでは、入力した新しい URL のページに行くための一般的
な方法が、さらに以下の二つあります。

`RET'
     Emacs-w3m のバッファにおいて、ヘッダラインに表示されている URL の
     位置にポイントを移動させてから RET を叩くことによって、ミニバッファ
     から URL を入力して、そのページを表示させることができます。
     Mozilla などの GUI ベースのウェブブラウザに慣れている人にとって、
     この機能はおなじみですよね。これに関する詳しい説明が *Note
     Emacs-w3m Functions:: で見つかるはずです (`w3m-view-this-url')。

`g'
     ミニバッファで URL の入力をうながして、emacs-w3m にそのページを表
     示させることができます (ポイントの位置とは無関係です)。このキーの
     割り当ては、すでに Gnus や Mew を利用している人にはおなじみでしょ
     う (`w3m-goto-url')。

`G'
     ミニバッファで URL の入力をうながして、それを新しいセッションで表
     示します。これはちょうど `g' (M-x w3m-goto-url) のように動作します
     が、新しいセッションを開くところが違います。Emacs 21、22 または
     XEmacs で emacs-w3m を使っているならば、新しいセッションを開くとい
     うことは、そのページを新しいタブで表示することを意味します。タブに
     ついてのもっと詳しいことは、*Note Using Tabs:: を参照して下さい
     (`w3m-goto-url-new-session')。

`c'
     表示しているページの URL をエコーエリアに表示するとともに、
     `kill-ring' に URL を挿入します (`w3m-print-current-url')。

`u'
     現在位置のリンクが指し示す対象の URL をエコーエリアに表示するとともに、
     `kill-ring' に URL を挿入します (`w3m-print-this-url')。

さて、あなたが読んでいるページが今日の時事ニュースかだれかの日記だった
ら、それを取り込んだ後で新しい内容で置き換えられているかもしれません。
次のコマンドを使うと、同じページの最新の内容に更新することができます。
(このコマンドは、ページが壊れているように見える場合に、全画面の再描画を
強制させるためにも役立てることができます。)

`R'
     ページを読み込み直します (`w3m-reload-this-page')。



File: emacs-w3m-ja.info, Node: Moving in a page, Next: Moving over pages, Prev: Launching and Jumping, Up: Browsing Web Pages

ページ内を飛びまわる
--------------------

Emacs で移動用に割り当てられている馴染み深いキーがウェブページの閲覧中
に使えることは、おそらくすでにあなたを魅了しているでしょう。信じてもら
えないかもしれませんが、もっとあるのです!  私たちはあなたの時間を大切に
したいので、ポイントの移動、ページのスクロール、あるいはとても速いやり
方でリンクを見つけるためのキーを追加しました。それらをマスターすれば、
それらがどんなに便利かを分かってもらえるでしょう。

Emacs の標準キーバインドに比べて `w3m-mode' では、より短いキーストロー
クでスクロールコマンド群を呼び出せるようにキーが割り当てられています。
ウェブページ内でテキストを入力できる個所はかなり特別なので (*Note
Submitting Forms::)、たいていのキーは特別な意味を持っていて、そこでは
`self-insert-command' に割り当てられていません。

`SPC'
     下に向かってスクロールします。`more' や `less' コマンド、あるいは
     Emacs の `view-mode' を使ったことがあれば、覚えるまでもないキーで
     すよね (`w3m-scroll-up-or-next-url')。

`DEL'
     上に向かってスクロールします。`less' コマンドや Emacs の
     `view-mode' に馴れ親しんでいるあなたの手は、自然にこのキーを叩くで
     しょう (`w3m-scroll-down-or-previous-url')。

`>'
     左にスクロールします。スクロールの量は
     `w3m-horizontal-scroll-columns' で与え、デフォルト値は 10 です
     (`w3m-scroll-left')。

`<'
     右にスクロールします。スクロールの量は
     `w3m-horizontal-scroll-columns' で与え、デフォルト値は 10 です
     (`w3m-scroll-right')。

`.'
     左にシフトします (小刻みな水平スクロール)。シフトの量は
     `w3m-horizontal-shift-columns' で与え、デフォルト値は 2 です
     (`w3m-shift-left')。

`,'
     右にシフトします (小刻みに水平スクロールです)。シフトの量は
     `w3m-horizontal-shift-columns' で与え、デフォルト値は 2 です
     (`w3m-shift-right')。

`M-l'
     現在ポイントがある位置のテキストが、水平方向に関して中心になるよう
     にスクロールします (`w3m-horizontal-recenter')。

`w3m-mode' メジャーモードでは、いろいろな種類の移動コマンドが定義されて
います。すなわち、リンク、フォーム、それに画像 (それが表示されていても
いなくても) です。

簡単な例を挙げてみます。広く知られている Google 検索エンジンで単語を調
べたいのだとしましょう。ステップ１: emacs-w3m で
`http://www.google.com' を開きます。ステップ２: いったんページが読み込
まれたら `]' を叩いて下さい。ぐわしっ! (1) (*Note Moving in a
page-Footnotes::) ポイントがページの最初の入力フォームに移動しましたね。
今や `RET' を叩いてそこに何かを入力して、`C-c C-c' で送ることができます。
このコマンド無しでは、そのページに `C-n' や `C-f' などを打ち込んで移動
しなければならなくて、まったく骨折りなことだったでしょう。

TAB
     次のリンク (emacs-w3m の用語では "アンカー") へポイントを移動しま
     す。より厳密には、順方向で最も近いアンカーへ移動します。

`M-TAB'
`S-TAB'
     前のアンカーへポイントを移動します。より厳密には、逆方向で最も近い
     アンカーへ移動します (`w3m-previous-anchor')。

`]'
     次のフォームへポイントを移動します。より厳密には、順方向で最も近い
     フォームへ移動します (`w3m-next-form')。

`['
     前のフォームへポイントを移動します。より厳密には、逆方向で最も近い
     フォームへ移動します (`w3m-previous-form')。

`}'
     次の画像へポイントを移動します。より厳密には、順方向で最も近い画像
     へ移動します (`w3m-next-image')。

`{'
     前の画像へポイントを移動します。より厳密には、逆方向で最も近い画像
     へ移動します (`w3m-previous-image')。


File: emacs-w3m-ja.info  Node: Moving in a page-Footnotes, Up: Moving in a page

(1) 普通そんな音はしないけれどね。英語版の Tadaa! は漫画などで使われる
擬音で、その状況に応じていろいろに訳されます。



File: emacs-w3m-ja.info, Node: Moving over pages, Next: Browsing With Mouse Operations, Prev: Moving in a page, Up: Browsing Web Pages

ページ間を渡り歩く
------------------

この項ではページからページに移動するやり方を説明します。リンクをたどっ
たり URL を入力する方法はここにはありません (それら二つの方法は *Note
Launching and Jumping:: で説明されています)。

ここには、以前に訪問したページの履歴を後ろに、および前に移動する (他の
ブラウザでは「戻る」「進む」としておなじみの) コマンドと、仮にもブラウ
ザたるものが義務として提供すべき「ホームページへ移動する」機能がありま
す。あらかじめ *Note Tracing History:: の項を読んでおいた方が、たぶん理
解しやすいでしょう。

`B'
     以前に訪問したページの履歴を１ページ戻ります
     (`w3m-view-previous-page')。数の引数 N が与えられると N ページ戻り
     ます。これは過去に戻るためのお勧めの方法です。

`N'
     以前に訪問したページの履歴を１ページ進みます
     (`w3m-view-next-page')。もちろん `B' で履歴を戻った後でなければ働
     きません。数の引数 N が与えられると N ページ進みます。このコマンド
     は、まさに back to the future を実現します!

`H'
     ホームページへ移動します (`w3m-gohome')。ホームページの URL は
     `w3m-home-page' という変数で指定します (*Note Customizable
     Variables::)。`w3m-home-page' のデフォルトの値は "about:" です。

以下のコマンドは、他には無い emacs-w3m の特長です。私たちはそれらの特許
を得ることができました。従って、他のいかなる場所でも見つからないでしょ
う。そのため、今日それらを使うことを学ばなければなりません! (真に受けな
いで下さいね。ただの冗談ですから。)

`^'
     現在表示されているページの親ディレクトリへの移動を試みます。例えば、
     http://foo/bar/" が表示されている場合は "http://foo/" に移動しよう
     とします。この機能は次の観察に基づいて実装されました: ウェブブラウ
     ザのユーザは、しばしば一段階上のディレクトリに移動しなければなりま
     せん。彼らが捜している情報が、現在のページに表示されないから (それ
     が削除されたので、あるいは検索エンジンが間違っているページに連れて
     行ったため) です。

     他のウェブブラウザを使う場合、一般には、URL から DEL キー等を複数
     回使って、手作業で末尾のコンポーネントを削除する手間が必要です。
     Emacs-w3m では、この操作を `^' のたった一押し! で行なうことができ
     ます。

SPC
     現在のポイント位置がバッファの末尾付近にあり、下方向にスクロールで
     きない場合に SPC を押すと「次」のページへ移動します
     (`w3m-scroll-up-or-next-url')。ここで「次のページ」とは、現在読ん
     でいるページのヘッダ内の特別な "next" フィールドが指し示しているペー
     ジのことです。この機能は訪問したページの履歴とは関係ありません。

     一度に巨大なコンテンツを転送するのを待つことが、ユーザにとって快適
     ではないなどの理由で、いくつかのウェブサイトがそれらのコンテンツを
     小さな複数のページに分割していることに、おそらく気付いているでしょ
     う。例えば、検索エンジンの検索結果は、しばしばそのように現われます。
     そんなサイトでは、ユーザはすべての情報にアクセスするために、しばし
     ば一つのページから次のページに、手動でリンクをたどらなければなりま
     せん。

     Emacs-w3m は、可能であればこのリンクを明示的にたどる操作をスクロー
     ル操作と統合して、複数のページに分割されて提供されるコンテンツを、
     できれば一枚のウェブページとして閲覧できるよう試みます。

     それはこうして働きます: そのようなウェブサイトでは、分割したウェブ
     ページ間のつながりをページのヘッダ内の "next"、"prev" あるいは
     previous" フィールドに記載してある場合があります。Emacs-w3m は何を
     たどるかを知るために、このフィールドを利用しています。

     二つの操作 (リンクをたどる + スクロール) が Emacs-w3m 上でどのよう
     に統合されているのかを、再び Google を例に説明しましょう。
     `http://www.google.com' を開き、ある単語を検索します。もし、あまり
     にもありふれた単語 (例えば「牛丼」) を検索すると、大量の検索結果を
     得ることになるでしょう。Google は、その基準を使ってソートした検索
     結果を複数のウェブページに分割した上で、まず最初のページを返します。
     SPC を使って最初のページをスクロールさせながら眺めて下さい。そして、
     そのページの最後がそのウィンドウで見えるまで、スクロールし続けて下
     さい。そこでは、あなたをびっくりさせるしかけが待っています。
     Emacs-w3m 以外のブラウザを使って残りの検索結果を見たいと思ったなら
     ば、

          Gooooooogle

     の下にならぶ数字のどれか

          1 2 3 4 5 6 7 8...

     をクリックする必要があります。しかし emacs-w3m ならば、単に SPC を
     押すというスクロールと同じ操作で、リンクをたどることができるのです。

DEL
     ポイント位置がバッファの先頭付近にあり、上方向にスクロールできない
     場合にDEL を押すと、「前」のページへ移動します
     (`w3m-scroll-down-or-previous-url')。ここで「前」のページとは、現
     在表示されているページのヘッダ内の "prev" あるいは "previous" フィー
     ルドに指定されているページのことです。この機能は訪問したページの履
     歴とは関係ありません。SPC (`w3m-scroll-up-or-next-url') と同様、た
     だし逆の動きになります。



File: emacs-w3m-ja.info, Node: Browsing With Mouse Operations, Next: Going back to daily hacking and/or daily writing, Prev: Moving over pages, Up: Browsing Web Pages

マウスを使ってサーフィン
------------------------

Emacs-w3m の開発者達は、Emacs ギーク (1) (*Note Browsing With Mouse
Operations-Footnotes::) でない普通の人にも emacs-w3m を使ってもらえるよ
うに、少し骨を折りました。例えば URL やフォームのテキストの入力を除くほ
とんどのウェブブラウズ操作を、マウスだけで行なうことができます。それで
もなお修飾キーとしてシフトキーが必要になる場合があることに注意して下さ
い。Emacs-w3m の開発者がみんな Emacs ギークなので...

ウェブ閲覧の最初の基本となる「リンクをたどる操作」には `mouse-2' を使っ
て下さい。Emacs 22.1 以上では、`mouse-1' でも
`mouse-1-click-follows-link' の値に応じた、リンクをたどる操作を行なうこ
とができます。

`mouse-2'
     マウスカーソルの下にあるリンクをたどります
     (`w3m-mouse-view-this-url')。

`S-mouse-2'
     新しいセッション (*Note Tracing History::) のもとでマウスカーソル
     の下にあるリンクをたどります
     (`w3m-mouse-view-this-url-new-session')。

Emacs-w3m のスクロールバー、メニュー及びツールバーは、マウスを使う場合
に役立ちます。ただし Emacs がそれらをサポートしていることが必要で、かつ
それらを有効にしていなければなりません。言うまでもないですが、スクロー
ルバーを動かして表示をスクロールさせることができます。メニューバーの
「File」を従えて一番左に位置する「W3M」メニューから、この info ドキュメ
ントで紹介している emacs-w3m の様々な機能を呼び出すことができます。主要
な機能についてはメニューアイテムを選ぶまでもないことに注意して下さい。
代わりにツールバー・アイコンを使うことができます。

タブ (*Note Using Tabs::) を使って emacs-w3m のバッファを切り替えるには、
ウィンドウのてっぺんの行を `mouse-2' で直接クリックするか、または「W3M」
メニューのとなりにある「TAB」メニューから一つを選んで下さい。


File: emacs-w3m-ja.info  Node: Browsing With Mouse Operations-Footnotes, Up: Browsing With Mouse Operations

(1) 英語版の Info では Emacs otaku



File: emacs-w3m-ja.info, Node: Going back to daily hacking and/or daily writing, Prev: Browsing With Mouse Operations, Up: Browsing Web Pages

普段の生活に戻るには
--------------------

思い出して下さい。おそらくあなたはウェブを見るために Emacs を始めたので
はありません。エディタの内蔵インタープリタを scheme に置き換えたり、ソ
フトウェアの info ドキュメントを作成したり、ソフトウェアの特許に対する
自分の考えを印刷したり...するためだったのではありませんか?  Emacs を使っ
ていた間に、仕事のためにウェブを見る必要に迫られ、しかしたまたま Emacs
から離れずにウェブを見ることができてしまったのです。

さぁ、本来の作業に戻る時が来ました。あなたががんばらないと世界は変りま
せん!  すぐにまたウェブを閲覧する必要があるかもしれないなら `q'を、しば
らく emacs-w3m に戻ってくるつもりがないなら `Q' を使って下さい。

`q'
     Emacs-w3m のウィンドウと閉じて、他のバッファを選択します
     (`w3m-close-window')。

`Q'
     Arrived URLs (閲覧履歴, *Note Tracing History::参照) のリストとクッ
     キー (*Note Cookie Variables::) をディスクに保存して、本当に
     emacs-w3m を終了します(`w3m-quit')。



File: emacs-w3m-ja.info, Node: Inline Images, Next: Tracing History, Prev: Browsing Web Pages, Up: Basic Usage

画像表示を ON/OFF する
======================

あなたが使っているバージョンの Emacs がバッファに画像を表示することがで
きるならば、あたかも Mozilla のような「グラフィカル」ブラウザのように、
emacs-w3m はウェブページにそれらを表示することができます。下記のコマン
ドのどれかを使おうとする前に、あなたの Emacs が正しく画像表示に使えるこ
とを確かめて下さい (*Note Required Emacs Version::)。

現在のバッファにおける画像の表示を切り替えるには `T' を使って下さい。そ
れによって emacs-w3m はサーバから画像を取ってきて、しかる後にそれらを
「グラフィカル」ブラウザとしてそうなるであろうバッファの位置に表示しま
す。もう一度キーを叩くと、画像はバッファから消え去ります。

デフォルトでは emacs-w3m は画像を表示しませんが、その振る舞いを変更して
常に画像表示することを選ぶのは可能で、それには変
数 `w3m-default-display-inline-images' をカスタマイズして、その値
を `nil' から `t' に変更する必要があります。
*Note Customizable Variables::.

さらに emacs-w3m には、画像の拡大縮小、ファイルへのセーブ、または外部
ビューワで見る、といった気の利いた機能が付属しています。

`T'
     現在のバッファ (および後でそれを元に生成されるバッファ) におけるイ
     ンライン画像の表示をトグルで切り替えます
     (`w3m-toggle-inline-images')。

`I'
     ポイントの下にある画像を外部ビューワで見ます (`w3m-view-image')。

`M-i'
     ポイントの下にある画像を外部ファイルにセーブします。デフォルトの名
     前はその画像の元の名前です。それ故に、ほとんどの場合に `M-i RET'
     は正しい名前で画像をセーブするでしょう (`w3m-save-image')。

`M-['
     ポイントの下にある画像を縮小 (zoom out) します
     (`w3m-zoom-out-image')。

`M-]'
     ポイントの下にある画像を拡大 (zoom in) します
     (`w3m-zoom-in-image')。



File: emacs-w3m-ja.info, Node: Tracing History, Next: Managing Bookmarks, Prev: Inline Images, Up: Basic Usage

時空を遡る
==========

Emacs-w3m には、以前に訪問したすべてのページのリストを提示するための、
2つの方法があります。第一の方法は「emacs-w3m の履歴」(emacs-w3m
history) と単純に呼ばれるもので、そのセッション (注: そのバッファ内で行
なう操作とそれに対する反応) において訪問したページのリストを階層的に提
示します。すなわち、あるリンクをたどると、それまでのページは行き先の
「親」になります。それは、訪れたページの跡をたどったり、履歴が長くなっ
てしまった場合にどこから着たかを思い出すためには、たいへん都合の良いも
のです。

これは、GNU プロジェクトのホームページをちょっと訪ねた後における、この
機能の動作の例です:

     GNU's Not Unix! - the GNU Project and the Free Software Foundation (FSF)
       Philosophy of the GNU Project - Free Software Foundation (FSF)
         GNU Emacs - GNU Project - Free Software Foundation (FSF)
          Order from the Free Software Foundation (FSF)
       Links to Other Free Software Sites - GNU Project - Free Software Fo...
         EFF: Homepage

(実際には、この例は 72 桁に収まるように、少しばかり編集されています。現
実の emacs-w3m バッファでは URLs は切り詰められません。)

どの emacs-w3m バッファからでも `s' キーを使うことによって、このような
履歴を提示させることが可能です。

この履歴はバッファ・ローカル、すなわち、ある emacs-w3m のバッファに固有
のものであることに注意して下さい。でも emacs-w3m にはユニークな機能があ
ります: あなたが新しいページを訪問する場合、履歴は新しいバッファにコピー
されます。その結果、それまでに訪れたページに今まで通りアクセスすること
ができます。これは、Mozilla などの、新しいバッファでは履歴が常にゼロか
らスタートするブラウザとは異なります。

Emacs-w3m は単にあなたが訪れたページを記録するだけでなく、あなたがペー
ジの正確な同じ場所へ戻りたい場合に、それらのページの中の特定の位置を記
録することもできます。`C-c C-@' を押すと、カーソルの位置が履歴に登録さ
れます。以前に記録した位置へ移動するには、そのページを開いた emacs-w3m
のバッファで `C-c C-v' を押して下さい。

`s'
     このセッションにおいて訪問した URLs のリストを表示します。

`C-c C-@'
     そのページの中のカーソルの位置を履歴に記録します。

`C-c C-v'
     現在表示しているページにおいて、`C-c C-@'
     (`w3m-history-store-position') で記憶した位置へ移動します。

もう一つの過去に訪れたページに関する情報を手に入れる方法は、「arrived
URLs」です。これはあなたが emacs-w3m で訪問した、最後の 500個! の URL
のリストです。リストは日付順で、最も最近のものを先頭に、それぞれのペー
ジの訪問時刻が表示されます。これは例です (info の表示が拡がり過ぎないよ
うに編集されています):

     Order from the Free Software Foundation (FSF)             22:53:25
     GNU Emacs - GNU Project - Free Software Foundation (FS    22:53:05
     Philosophy of the GNU Project - Free Software Foundati... 22:52:46
     Philosophy of the GNU Project - Free Software Foundati... 22:52:39
     EFF: Homepage                                             22:52:18
     Links to Other Free Software Sites - GNU Project - Fre... 22:52:07
     Links to Other Free Software Sites - GNU Project - Fre... 22:52:07
     GNU's Not Unix! - the GNU Project and the Free Softwar... 22:51:32
     Bookmarks                                                 22:51:02
     The DICT Development Group- upwards                       2003-01-08
     the monkey puzzle: new debian packages as an rss feed     2003-01-08
     new-debian-packages.rss                                   2003-01-07
     it's a miracle                                            2003-01-06

前のコマンドに接頭引数を渡す、すなわち `C-u s' を使うことによって、この
履歴を得ることができます。このページに表示される URLs の数はカスタマイ
ズできます。変数 `w3m-keep-arrived-urls' を参照して下さい。それはデフォ
ルトでは 500 を越えることはできません。*Note Customizable Variables::.

もちろん、すべての場合に、例に示されているすべての行はリンクです。その
リンクをたどることによって、通常のページを訪問していたらちょうどそうな
るように、以前に訪ねたどのページにも行くことができます。

`s'
`C-u s'
     このセッションにおいて訪問した URLs のリストを表示します。接頭引数
     付きで呼ばれると、代わりに arrived URLs を表示します
     (`w3m-history')。

*Note Moving over pages:: の項も見て下さい。そこでは「戻る」「進む」な
どの機能に割り当てられた単純なキーで、履歴の中を移動するやり方を説明し
ています。



File: emacs-w3m-ja.info, Node: Managing Bookmarks, Next: Using Tabs, Prev: Tracing History, Up: Basic Usage

ぼくの/わたしのお気に入り
=========================

現代的なあまたのブラウザの例に漏れず、emacs-w3m には先進のブックマーク
の機能があります。それによってカテゴリー毎に分類し、それらを編集し、あ
あ、もちろん簡単に閲覧することができます。

日本語版注釈: ブックマークの語源は、本に挟む栞 (しおり) のことです。

* Menu:

* Adding Bookmarks::            お気に入りに URL を加える
* Consulting Bookmarks::        ブックマークを閲覧する
* Editing Bookmarks::           ブックマークを変更するには?



File: emacs-w3m-ja.info, Node: Adding Bookmarks, Next: Consulting Bookmarks, Prev: Managing Bookmarks, Up: Managing Bookmarks

お気に入りに URL を加える
-------------------------

ブックマークに URL を加えるには、いくつかのやり方があります。最初の一つ
は、`a' キーを使って (または `w3m-bookmark-add-current-url' コマンドを
呼んで) 今現在閲覧しているページを加えることです。すると、そのブックマー
クをどの項目に入れるかを尋ねられ (TAB キーによる補完が効きます)、タイト
ルの書き換えが促されます (デフォルトは、そのページのタイトルになってい
ます)。これらの二つをこなしたら、それらを有効にするために `RET' を叩い
て下さい。すると "Added" というメッセージがミニバッファに現れて、(驚く
なかれ!) そのページがブックマークに記録されます。

ブックマークを加えるもう一つの方法は、`M-a' を使う (または
`w3m-bookmark-add-this-url' コマンドを呼ぶ) ことです。これは、現在位置
の URL (もしそのリンクをたどると、閲覧することができる URL) をブックマー
クに加えます。その場合でも最初に説明した方法と同様に、項目の名前とタイ
トルを入力しなければなりません。そのとき、それらのデフォルトはリンク自
体の名前になっています。

最後に、三番目の方法は `C-u a' を叩くことです。このときは、ブックマーク
に加える URL、その項目、およびタイトルの入力が促されます。

`a'
     現在のページをブックマークに加えます。接頭引数付きで呼ばれた場合は、
     加える URL の入力が求められます (`w3m-bookmark-add-current-url')。

`M-a'
     現在位置の URL をブックマークに加えます
     (`w3m-bookmark-add-this-url')。



File: emacs-w3m-ja.info, Node: Consulting Bookmarks, Next: Editing Bookmarks, Prev: Adding Bookmarks, Up: Managing Bookmarks

ブックマークを閲覧する
----------------------

ブックマークされたページを閲覧する最も簡単な方法は、emacs-w3m のバッファ
で `v' キーを叩くことです。ですがもう一つ、特別な URL である
`about://bookmark/' に行くことによっても可能です。すると一行あたり一つ
ずつのブックマークが、項目ごとにまとめられて表示されるでしょう。そこで
は、他のページを閲覧するのと同じように、それらを確実に閲覧することがで
きます。

ブックマークのページでは bookmark マイナーモードが働いています。それは、
ブックマークを編集するためのキーバインドを追加します。*Note Editing
Bookmarks::.

`v'
     ブックマークのページを呼び出します (`w3m-bookmark-view')。



File: emacs-w3m-ja.info, Node: Editing Bookmarks, Prev: Consulting Bookmarks, Up: Managing Bookmarks

ブックマークを変更するには?
---------------------------

Bookmark マイナーモード (*Note Consulting Bookmarks::) は、ブックマーク
を編集するためにいくつかのキーバインドを設けています。中でもブックマー
クを kill (すなわち消去) するための `C-k' とブックマーク・ファイルを編
集するための `E' は、最も注目に値します。

ブックマークは HTML ファイルに収められています。したがってそのファイル
は手で編集することができますが、十分に注意して下さい。emacs-w3m が項目
名を認識するために必要なコメントを消してしまうことによって、ものごとは
簡単に台無しになります。あなたが HTML の基本を知っていれば、むしろその
ファイルの中身は極めて分かり易いものでしょう。

`C-k'
     現在位置のブックマークを kill します (`w3m-bookmark-kill-entry')。

`E'
     ブックマーク・ファイルを読み込んで、編集可能な状態にします
     (`w3m-bookmark-edit')。

`C-_'
     やり直しをします (`w3m-bookmark-undo')。



File: emacs-w3m-ja.info, Node: Using Tabs, Next: Working with buffers, Prev: Managing Bookmarks, Up: Basic Usage

みんなタブが好きだよね
======================

ほとんどの他のテキストベースのブラウザーと異なり、emacs-w3m はタブによ
る閲覧をサポートしています (1) (*Note Using Tabs-Footnotes::)。タブによ
る閲覧って何? と尋ねられそうですね。それはとても単純で、ウィンドウのてっ
ぺんの行にすべてのバッファを単純かつ分かりやすいやり方で表示することに
よって、単一のウィンドゥですべての emacs-w3m のバッファを表現する方法で
す。それぞれのバッファは「タブ」として表示されます。この行は、他のバッ
ファに移動したり、ページの状態を知ることができるようにするために常に見
えたままになっていて、バッファにつられてスクロールしません。

その感触をつかむ最も簡単な方法は、単に試してみることです。ですから、引
き続いて emacs-w3m のセッションを始めて下さい。何も設定変更をしていなけ
れば、デフォルトでタブの行が現れます。てっぺんで、小さな四角に現在のペー
ジのタイトルを表示している明るい行がそれです。では、(例えば `G' で) 別
の w3m バッファを作ってみましょう。すると四角が二つになったでしょう。そ
れらがタブです。

もっとも分かりやすいタブの使い道は切り替えです: タブの上で `mouse-1' ボ
タンをクリックすることによって、そのバッファを表示させることができます。
`mouse-2' ボタンでも動作します。これは、複数の emacs-w3m バッファを使う
ための、非常に速くて簡単な方法です。単に指し示してクリックすれば良いの
ですから。(はいはい、あなたを無視していませんよ。あなたはキーボードを使っ
て切り替えたいのですね。ご心配無く。それも可能です。次の節で説明します
から、黙って読み続けて下さい!)

もう一つの気が利いた機能は、ページの状態を知らせることです。カラー端末
かウィンドゥシステムを使っていれば、ページの状態を知らせるために
emacs-w3m は違う色でテキストをタブに表示します (2) (*Note Using
Tabs-Footnotes::)。例えばベージを取り込んでいる最中はテキストは赤くなっ
ていて、取り込みが完了するとデフォルトの色 (通常は黒) に戻ります。これ
により、見ようと思って待っているページが到着したかどうかが、タブ行を一
目見ただけで分かります。

最後に、もしウェブページが favicon を持っていれば、それもタブに表示され
ます (3) (*Note Using Tabs-Footnotes::)。Emacs-w3m ユーザにもっと視覚効
果を!

ユーザオプション:

`w3m-use-tab'
     タブによる閲覧を活かすかどうか。


File: emacs-w3m-ja.info  Node: Using Tabs-Footnotes, Up: Using Tabs

(1) 誰のせいでもないけれど、Emacs 19 か 20 のユーザはタブを使えません。

(2) XEmacs はすべてのタブをいつも同じ色で表示しますが、選択されたタブと
他のものを区別したり、モードラインで現在のページの状態を知ることは簡単
です。

(3) XEmacs では今のところタブ行に favicon は表示されません。



File: emacs-w3m-ja.info, Node: Working with buffers, Next: Downloading, Prev: Using Tabs, Up: Basic Usage

バッファを作る/消す/移動する
============================

遅かれ早かれあなたは emacs-w3m 中毒になって、すべてのウェブの閲覧をそれ
で賄わなければならなくなるでしょう。あなたがめげてしまいそうなこの任務
を手伝うために、emacs-w3m のバッファで動作するたくさんの違う手段を考え
ました。

* Menu:

* Creating and killing buffers:: バッファを作ったり消したり
* Moving across buffers::        バッファ間の移動
* Selecting buffers::            リストからバッファを選ぶ



File: emacs-w3m-ja.info, Node: Creating and killing buffers, Next: Moving across buffers, Prev: Working with buffers, Up: Working with buffers

バッファを作ったり消したり
--------------------------

時に、ウェブページを開かないで単に新しいバッファーを作ることが役に立つ
ことがあります。この操作を emacs-w3m の用語では「ふたごのコピーを作る」
(creating a twin copy) と言います。これは単に、その内容が現在のバッファ
と同一な新しいバッファを作ります。

この反対はバッファーを閉じることで、今はその内容に興味が無い一つのバッ
ファを、単に閉じることができます。あるいは、現在のバッファ以外のすべて
を閉じることを決断しても良いです。以下のコマンドでそれを行なって下さい:

`C-c C-t'
     現在のバッファと同一のコピーを新しい名前で作ります。これは新しいバッ
     ファにウェブページを取り込まずに、新しいセッションを始めるのに使い
     ます (`w3m-copy-buffer')。

`C-c C-w'
     現在の emacs-w3m のバッファを閉じます (`w3m-delete-buffer')。

`C-c M-w'
     現在のもの以外のすべての emacs-w3m のバッファを閉じます
     (`w3m-delete-other-buffers')。



File: emacs-w3m-ja.info, Node: Moving across buffers, Next: Selecting buffers, Prev: Creating and killing buffers, Up: Working with buffers

バッファ間の移動
----------------

最も頻繁に使うコマンドがたぶん隣のバッファに行くものであろうことは、世
間の認めるところでしょう。それは、現在の「後」か「前」のバッファです。
この意味はタブを使ってみればよくわかります。次のバッファは現在の右側の
一つ後、前のバッファは左側です。しかし、残念ながら XEmacs はタブを順不
同に表示するので、どれが隣のバッファかを知るには、各タブに表示されてい
る数字に注目する必要があります。これらのコマンドに割り当てられているキー
は `C-c C-p' と `C-c C-n' です。

これらのコマンドは数字接頭引数の習慣を理解します。すなわち、それらを数
N を引数として呼ぶと、現在のバッファから N 個離れたバッファに行きます。
例えば、現在位置から右にバッファを二個分 (すなわちバッファ二個分だけ次
に) 移動するには、`2 C-c C-n' を使って下さい (1) (*Note Moving across
buffers-Footnotes::)。

`C-c C-p'
     前の emacs-w3m バッファに移動します。Emacs 21 以上では、これは通常
     タブ行において左方向に次です。数の引数 N を付けて使うと、バッファ
     を N 個分前に移動します (`w3m-previous-buffer')。

`C-c C-n'
     次の emacs-w3m バッファに移動します。Emacs 21 以上では、これは通常
     タブ行において右方向に次です。数の引数 N を付けて使うと、バッファ
     を N 個分次に移動します (`w3m-next-buffer')。

私たちが骨を折ったにもかかわらず、これらのコマンドがお気に召さないなら
ば、あなたが欲しいものが ibuffer や iswitchb のような万能志向の人
(generalist) 向けのバッファ管理パッケージの中にあるかどうかを探してみる
のも良いかもしれません。emacs-w3m バッファは Emacs の正規のバッファです
から、それらもまた良好に動作するでしょう。


File: emacs-w3m-ja.info  Node: Moving across buffers-Footnotes, Up: Moving across buffers

(1) いつものように、`2 C-c C-n' の代わりに `C-u 2 C-c C-n' を使っ
ても良いのですが、emacs-w3m のバッファではすべての数字キーとマイナス記
号が数の接頭引数に割り当てられていることを覚えておいて下さい。



File: emacs-w3m-ja.info, Node: Selecting buffers, Prev: Moving across buffers, Up: Working with buffers

リストからバッファを選ぶ
------------------------

リストから emacs-w3m のバッファを選ぶための二つのやり方があります。一つ
目は、`C-c C-a' で呼び出されるミニバッファ・ベースのインターフェースで
す。表示したいバッファを、`M-p' と `M-n' キー (または `↑' と `↓' キー)
を使って選ぶことができ、それらはリストの中で循環します。また、プロンプ
トを編集して、`TAB' の補完を使って既存のウェブページのタイトルを書き込
むこともできます。例えば、"Google Search" のページを開いてあるならば、
Goo" に続けて `TAB' を叩くことによって、そのページのタイトルが完成しま
す。ページの名前の後ろには、(鍵括弧で挟まれた) バッファの名前が付きます。
そして `RET' を使うと、あなたが選んだバッファに切り替わります。

二つ目のもっと洗練されたインターフェースは emacs-w3m バッファリストと言
い、`C-c C-s' で起動されます。それは分割されたウィンドゥにすべての開い
ているバッファを表示し (`C-c C-s' で表示形式が切り替わります)、実時間で
バッファを見ることができるようになります。そのバッファリストの中でポイ
ントを移動すると、ポイントのところにあるバッファが主ウィンドゥに表示さ
れ、バッファの切り替えが直接目に見える形で返ってくるのです。

バッファリストの中を移動するには `p' と `n' キー (または矢印キー) を使っ
て下さい。バッファリストでは、`DEL' と `SPC' で主ウィンドゥに表示されて
いるバッファをスクロールさせることが可能で、これは正しいバッファを見て
いるかどうかをチェックしたいときに便利です。ポイントのところにあるバッ
ファを選びたいときは `RET' キーを使って下さい。この場合はバッファリスト
が隠されます。あるいは、`w' キーを使った場合はバッファリストは表示され
たままで、主ウィンドゥにフォーカスします。

また、このメニューで普通のバッファで使われるのと同じキー割り当て
(*Note Creating and killing buffers::) で、バッファを閉じたり作ることも
できます。

最後に、`?' はヘルプの表示、`g' はリストの作り直し、そして `q' はバッファ
リストの終了を主ウィンドゥのバッファは変更せずに、それぞれ実行します。

`C-c C-a'
     ミニバッファでバッファ名の入力を求めます。`M-p' と `M-n' で既存の
     バッファが循環し、`TAB' で補完できます (`w3m-switch-buffer')。

`C-c C-s'
     分割されたウィンドゥにバッファリストを表示します
     (`w3m-select-buffer')。このウィンドゥでは `C-c C-s' で水平と垂直モー
     ドが切り替わり、`RET' でポイントのところにあるバッファを選んでバッ
     ファリストは隠蔽、`w' でポイントのところにあるバッファを選んでそれ
     にフォーカス、`n' と `p' それに矢印キーが上下の移動に使えます。



File: emacs-w3m-ja.info, Node: Downloading, Next: Submitting Forms, Prev: Working with buffers, Up: Basic Usage

ファイルをダウンロードする
==========================

どんなウェブページやファイルも emacs-w3m でダウンロード (すなわち取得、
表示ではありません) できます。単にダウンロードしたいリンクにポイントを
置いて `d' を叩いて下さい。ローカルにセーブするファイル名が尋ねられます。
デフォルトでは遠隔サーバーにおけるファイルの名前になります。それで良け
れば `RET' を押して下さい。ダウンロードは非同期に実行され、Emacs で行なっ
ている他の仕事の邪魔をしないので、そうしたければ他のバッファで
emacs-w3m による閲覧を続けることができます。

このダウンロードの仕組みは w3m を使うのですが、代わりにもっと強力な
wget を使うことも考慮してみて下さい。私たちのお友だちプロジェクトである
emacs-wget" を覗いてみましょう。そのホームページはここ
`http://pop-club.hp.infoseek.co.jp/emacs/emacs-wget/' です。

`d'
     ポイントのところにあるリンクが指し示すファイルかページをダウンロー
     ドします (`w3m-download-this-url')。



File: emacs-w3m-ja.info, Node: Submitting Forms, Next: HTML File Information, Prev: Downloading, Up: Basic Usage

HTML フォームに記入する
=======================

これらの emacs-w3m コマンドは、単純なキーバインドと専用の Emacs のウィ
ンドゥかミニバッファを使って、フォームからフォームへの移動とフィールド
に入力するための機能を提供します。

覚えておいて欲しい大事なキーバインドは `RET' です。これは現在位置にある
ものによって異なる意味を持ちます。テキスト領域 (textarea) では、ミニバッ
ファで値を入力することが促されます。選択用のタグでは、選択肢のリストが
Emacs のエレクトリック (electric == 自己挿入) ウィンドゥに現れます (そ
こでは矢印キーで移動して、`RET' キーで一つを選ぶことができます)。ラジオ
ボタンおよびチェックボックスでは、`RET' キーでそれらのうちの一つを選び
ます。

ミニバッファかエレクトリック・ウィンドゥにいるときは、`C-c C-q' キーで
取り消すことができます。フォームに記入したものを送り出すには `C-c C-c'
を使って下さい。

`]'
     次のフォームにジャンプします (`w3m-next-form')。

`['
     前のフォームにジャンプします (`w3m-previous-form')。

`C-c C-c'
     現在位置のフォームに記入したものを送り出します
     (`w3m-submit-form')。

`RET'
     現在位置にあるのフォーム値を書き換えます。

`RET (w3m-form-*-keymap)'
     その値を選択します。

`C-c C-q (w3m-form-*-keymap)'
     フォームの編集を中断して、変更を取り止めます。

`w3m-form-use-textarea-backup' が `nil' に設定されていなかったら、
textarea で入力したテキストを後で再利用できるように、バックアップ・ファ
イルに記録します。フォームの編集を始めるときにバックアップされたテキス
トがあったら、それを使うかどうかを尋ねられるでしょう。テキストを保存す
るためのファイルは、変数 `w3m-form-textarea-directory' で指定されるディ
レクトリに格納されます。



File: emacs-w3m-ja.info, Node: HTML File Information, Prev: Submitting Forms, Up: Basic Usage

ウェブページ作りとハックのお手伝い
==================================

いつもドキュメントの執筆環境として、あるいはソフトウェアの開発環境とし
て Emacs を使っている人には、同じその環境の中でウェブを閲覧できることは
本当に便利でしょう。例えば HTML ファイルを執筆しているのであれば、外部
のウェブブラウザを起動する必要なく、Emasc の中で作成した HTML ファイル
をプレビューできます。プログラミング・マラソンの最中に、迅速に技術文献
からサンプルコードを切り貼りするといったことだって...

逆はどうでしょう。(すなわちウェブ閲覧の環境で、そのソースである HTML ファ
イルを編集したり、参照したりできたら) かっこいいと思いませんか？ ドキュ
メントを執筆中に emacs-w3m で下見 (preview) して誤字を発見したと想像し
てみて下さい。その HTML ファイルをたちどころに修正したくなるはずです。
あなたがウェブテクノロジーに携わるプログラマなら、閲覧中のウェブページ
をHTML 形式で閲覧したくなることがあるでしょう、特に、新聞モジュールの作
者の方 (*Note Shimbun Basics::)。

HTML ファイルを開いている Emacs のバッファの名前を明示的に指定してバッ
ファを切り替えることも普通にできますが、emacs-w3m ではそういった目的の
ために専用のキーが割当てられています。Emacs-w3m は自分が現在表示してい
るウェブページの URL を知ってるんです。その情報を使わない手はありません。

`\'
     表示中のウェブページを HTML 形式でそのまま表示します
     (`w3m-view-source')。

`='
     表示中のウェブページの情報を表示します。情報には、タイトル、URL、
     ドキュメントタイプ、最終変更日時が含まれます (`w3m-view-header')。

`E'
     現在閲覧中のローカルファイルを編集します (`w3m-edit-current-url')。

`e'
     現在ポイントの下にあるリンク先のローカルファイルを編集します
     (`w3m-edit-this-url')。

`M'
     (Emacs-w3m 以外の) 外部ブラウザを新たに起動して、現在 emacs-w3m で
     閲覧しているページを表示します
     (`w3m-view-url-with-external-browser')。どの外部ブラウザを使うかは、
     変数 `w3m-content-type-alist'によってURLの種類毎に定義されます。

ここで紹介した以外にも、他のコマンドや Emacs のサブシステムと
emacs-w3m を連携させる方法を *Note Tips:: にて紹介しているので、参考に
して下さい。



File: emacs-w3m-ja.info, Node: Pretty Good Features, Next: Customizable Variables, Prev: Basic Usage, Up: Top

たくさんのすぐれもの
********************

* Menu:

* Using Search Engines::        使いやすいウェブ検索
* Grouping URLs::               一つの URL で複数のウェブページを見る
* Weather Information::         明日の天気は晴れでしょう
* Using Antenna::               アンテナを張り巡らそう
* Showing Directory Tree::      ディレクトリの木構造を表示する
* Viewing Perl Documents::      Perl のドキュメントを見る
* Using Namazu::                Namazu でファイルを検索する
* Octet::                       application/octet-stream データを見る



File: emacs-w3m-ja.info, Node: Using Search Engines, Next: Grouping URLs, Prev: Pretty Good Features, Up: Pretty Good Features

使いやすいウェブ検索
====================

Emacs-w3m には検索エンジンを利用するための先進の機能があり、二つのイン
ターフェースを通して利用することができます:

   * 標準のインターフェースです。`S' キーでいずれかの emacs-w3m バッファ
     から起動されます。これは検索エンジンを指定して検索語を入力する、単
     純な対話型のやり方です。*Note The Search Interface:: を参照して下
     さい。

   * クイックサーチ・インターフェースです。これは技巧的に作られた URL
     に行くことによって検索エンジンを利用するための、より速い (さらに、
     より複雑な) 方法です。この機能に関する詳細は *Note Quick
     Searching:: を参照して下さい。

* Menu:

* The Search Interface::        Emacs-w3m による検索のやり方
* Quick Searching::             もう一つの (そして速い) ウェブ検索
* Adding New Search Engines::   お気に入りのエンジンを使うには?



File: emacs-w3m-ja.info, Node: The Search Interface, Next: Quick Searching, Prev: Using Search Engines, Up: Using Search Engines

Emacs-w3m による検索のやり方
----------------------------

Emacs-w3m のバッファで `S' キーを使うことにより (デフォルトのキーマップ
を使うものとします)、標準の検索インターフェースを立ち上げることができま
す。すると、ミニバッファで検索語の入力を求めるプロンプトが現れるので、
一つまたは複数の語を入れて、`RET' を叩いて下さい。そのエンジンの検索結
果のページが現れ、その後、あたかも検索エンジンに通常のウェブの流儀によ
る入力を行なったときのように、結果を閲覧することができます。

おそらく、あなたはどのエンジンで探索したいかを決める機会が与えられてい
ないことに気付くでしょう。Emacs-w3m はデフォルトで Google 検索エンジン
を使いますが、変数 `w3m-search-default-engine' (*Note Customizable
Variables:: 参照) をカスタマイズすることによって、この振る舞いを変更す
ることができます。あるいは、このコマンドを使うたびに検索エンジンを指定
することができます。

どのエンジンを使用するかを明示するためには、コマンドに接頭引数を与えな
ければなりません (これは `C-u S' のように、コマンドの前に通常 `C-u' を
叩くことを意味します)。すると emacs-w3m はエンジンの入力を促すので、そ
の名前を一つ選ぶことができます (TAB キーで補完ができます)。いったん選択
したら `RET' キーを叩いて下さい。その後で検索語を入力することができ、
`RET' をタイプすれば検索結果が現れるでしょう。

`S'
     新しい検索を始めます。接頭引数付きで呼ばれた場合は、どのエンジンを
     使うかを尋ねます (`w3m-search')。



File: emacs-w3m-ja.info, Node: Quick Searching, Next: Adding New Search Engines, Prev: The Search Interface, Up: Using Search Engines

もう一つの (そして速い) ウェブ検索
----------------------------------

ウェブ・パワーユーザ (これを読んでいるあなた) には、迅速で効率的な検索
の方法が必要です。クイックサーチはその一つです。

それは何をするのかって?  それは `gg:emacs' のような特別の URL に行くだ
けで、ウェブ検索を始めさせるのです。このモードの動作の長所は、次の通り
です:

   * 速い。エンジンと検索語を選ぶのに、一つの URL をタイプするだけです。

   * 便利。この機能によって、容易に emacs-w3m のタブかウィンドゥを開い
     て、検索を始めることができます。例えば、`G' キーで新しいウィンドウ
     を開いてクイックサーチ URL に行くように。そして、特別のクイックサー
     チ URL そのものにも、ブックマークを付けることができます。

   * グルーピング機能も使える。例えば `group:gg:emacs&ya:w3m' のよう
     な URL によって、同時に二つの検索を始めることができます。例えばこの場合
     は、Google で "emacs" の、Yahoo! で "w3m" の検索をそれぞれ始めます。
     *Note Grouping URLs::.

これを使うのはとても簡単です。"gnu" という単語を Google で探したいとす
れば、`g' を叩いてから "gg:gnu" という URL をタイプして下さい。こ
の表現の第一の部分 "gg" は、Google 検索エンジンを使用したいことを示しま
す。第二の部分は検索語です。エンジンと検索語は、コロンで分けなければなり
ません。そして `RET' を叩けば検索結果を見ることができます。スペース
で分離した複数の語を入力できることを、心に留めておいて下さい (ミニバッファ
でスペースをタイプするには、`C-q SPC' のように、最初に
`C-q' を叩いて下さい)。

Emacs-w3m のデフォルトでは、利用可能ないくつかの検索エンジンの短縮形が
あり、それらは変数 `w3m-uri-replace-alist' で定義されています。例えば
Google には "gg"、Google Groups 用には "ggg"、Yahoo! のための "ya"、お
よび Altavista に対する "al" などの短い名前です。さらに検索エンジンの短
縮形を追加するには *Note Adding New Search Engines:: を参照して下さい。

短縮形の代わりに、"google" や "yahoo" のような完全なエンジンの名前を、
クイックサーチ URL に使うこともできます。それらの名前は、変数
`w3m-search-engine-alist' で定義されます。



File: emacs-w3m-ja.info, Node: Adding New Search Engines, Prev: Quick Searching, Up: Using Search Engines

お気に入りのエンジンを使うには?
-------------------------------

Emacs-w3m は利用可能な多くの検索エンジンを持っています。あなたのお気に
入りの検索エンジンを使いたいのに、万が一にもそれが既知の検索エンジンの
リストに載っていなかったらどうしましょう?  それを検索エンジンのリストに
加えれば良いのです。そしてそれは極めて簡単です:

  1. 最初に、あなたが加えたい検索エンジンのエントリー・ポイントが何かを
     知らなければなりません。例えば:

     `http://my.searchengine.com/?query=foobar'

     ここで foobar はあなたが検索したい語です。

  2. この情報が手に入ったら、`~/.emacs-w3m' ファイルに加えて下さい:

          (eval-after-load "w3m-search"
            '(add-to-list 'w3m-search-engine-alist
                          '("My engine"
                            "http://my.searchengine.com/?query=%s"
                            nil)))

     第一フィールドの "My engine" をあなたのエンジンの説明で、第二フィー
     ルドをエントリー・ポイントで置き換えて下さい (`%s' は重要です。こ
     れは検索を行なうときに、検索語で置き換えられます)。そして第三フィー
     ルドは使用するエンコーディングを意味し、`nil' またはそれが省略され
     た場合は変数 `w3m-default-coding-system' の値が標準のエンコーディ
     ングとして使われます。

     英語の検索エンジンでは滅多に気にする必要が無いことなのですが、いく
     つかの日本の検索エンジンでは、それに何か (例えば `euc-japan') を指
     定する必要があるかもしれません。

  3. 今やこの検索エンジンは、emacs-w3m で通常の `S' キーで使うことがで
     きます。このエンジンを頻繁に使うのならば、短いエンジンの名前をクイッ
     クサーチエンジン (*Note Quick Searching:: を参照) に加えることもで
     きます。それには、以下のコードを `~/.emacs-w3m' ファイルに追加して
     下さい:

          (eval-after-load "w3m-search"
            '(progn
               (add-to-list 'w3m-search-engine-alist
                            '("My engine"
                              "http://my.searchengine.com/?query=%s"
                              nil))
               (add-to-list 'w3m-uri-replace-alist
                            '("\\`my:" w3m-search-uri-replace "My engine"))))

     これにより、`my:foobar' のような URL を使って、あなたの検索エンジ
     ンで "foobar" という語を検索することができます。



